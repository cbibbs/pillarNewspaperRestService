{
  "name": "spromise",
  "version": "0.0.4",
  "license": "MIT",
  "main": "dist/spromise.js",
  "author": {
    "name": "Miguel Castillo",
    "email": "mahchagnu@gmail.com"
  },
  "title": "spromise",
  "description": "Small Promise",
  "keywords": [
    "promise",
    "a+ promise",
    "jquery promise",
    "$ promise",
    "defer",
    "deferred",
    "thenable",
    "then"
  ],
  "homepage": "https://github.com/MiguelCastillo/spromise",
  "repository": {
    "type": "git",
    "url": "http://github.com/MiguelCastillo/spromise.git"
  },
  "bugs": {
    "url": "https://github.com/MiguelCastillo/spromise/issues",
    "email": "manchagnu@gmail.com"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.13",
    "grunt-contrib-requirejs": "~0.4.1",
    "promises-aplus-tests": "~2.0.3"
  },
  "scripts": {
    "test": "grunt travis --verbose"
  },
  "directories": {
    "test": "tests"
  },
  "readme": "spromise [![Build Status](https://travis-ci.org/MiguelCastillo/spromise.png?branch=master)](https://travis-ci.org/MiguelCastillo/spromise)\r\n=========\r\n\r\nSmall Promise, is a lightweight promise library that's 99% <i>compliant</i> with the promise a+ spec.  Designed to play well with other ecosystems such as jQuery.\r\n\r\n\r\nAPI\r\n========\r\n\r\n1. <code>then</code> - interface that takes in as a first parameter an <code>onResolved</code> callback and as a second parameter an <code>onRejected</code> callback.  Great for chaining promises and controlling the flow of execution in a chain of promises.\r\n2. <code>done</code> - takes an <code>onResolved</code> callback that gets called when the promise is successfully resolved. If the promise is resolved with data, that will then be passed in as parameters to <code>onResolved</code>.\r\n3. <code>fail</code> - takes an <code>onRejected</code> callback that gets called when the promise is rejected. If the promise is rejected with a reason(s), that will then be passed in as parameters to <code>onRejected</code>.\r\n4. <code>always</code> - takes a callback that is always called, either when the promise is rejected or resolved.\r\n5. <code>resolve</code> - interface to resolve the promise. This will cause all currently registered <code>onResolved</code> callbacks and any future ones to be called.  Any data passed into the <code>resolve</code> interface will then be passed into each callback as parameters.\r\n6. <code>reject</code> - interface to reject the promise. As <code>resolve</code>, this will cause all currently registered <code>onRejected</code> callbacks and any future ones to be called.  Any reason(s) passed into the <code>reject</code> interface will then be passed into each callback as paramters.\r\n7. <code>state</code> - interface to get the current state of the promise.  It can either be pending, resolved, or rejected.  Please use <code>spromise.states</code> for a more meaningful translation of the value returned.  E.g. <code>if (promise1.state() === spromise.states.pending) {}</code>.\r\n8. <code>when</code> - creates and returns a promise. <code>when</code> also takes in N arguments that control when the <code>when</code> promise is resolved.  Passing in promises as arguments will cause <code>when</code> to wait for all the input promises to resolve.  If one fails, everything fails.  None promise objects can also be passed in, in which case they are immediately available as resolved.  <code>when</code> is very useful when synchronizing a group of asynchronous and synchronous operations.\r\n9. <code>spromise.defer</code> Creates a new promise object.  If an object is passed in as the first parameter, the object will be extended to contain all the promise interfaces.\r\n10. <code>spromise.thenable</code> Takes in a thenable object used for resolving a newly created promise that's returned.  A thenable object is just any object/function with a then interface that is a assumed to be a promise object.\r\n11. <code>spromise.resolved</code> Returns a new promise that is already resolved with the value passed in.\r\n12. <code>spromise.rejected</code> Returns a new promise that is already rejected with the reason passed in.\r\n\r\nExamples\r\n========\r\nFor a set of use cases, please see <a href=\"https://github.com/MiguelCastillo/spromise/tree/master/tests/specs\">tests</a>\r\n\r\n<p>Simplest node sample</p>\r\n``` javascript\r\nvar spromise = require(\"spromise\");\r\nvar promise = spromise();\r\n\r\npromise.done(function(data) {\r\n  console.log(data);\r\n});\r\n\r\npromise.resolve(\"Yes, it works\");\r\n```\r\n<p>Factory</p>\r\n``` javascript\r\n// Resolve\r\nspromise(function(resolve, reject){\r\n  resolve(\"Yes, we are resolving this\");\r\n})\r\n.done(function(value) {\r\n  // Will print \"Yes, we are resolving this\"\r\n  console.log(value);\r\n});\r\n\r\n// Reject\r\nspromise(function(resolve, reject){\r\n  reject(\"booo\");\r\n})\r\n.fail(function(value) {\r\n  // Will print \"booo\"\r\n  console.log(value);\r\n});\r\n```\r\n<p>jQuery ajax ($.ajax)</p>\r\n``` javascript\r\nspromise.thenable($.ajax(\"json/array.json\")).done(function(data, code, xhr) {\r\n  // Will print what the ajax call returns\r\n  console.log(data);\r\n});\r\n```\r\n<p>Synchronizing multiple $.ajax request</p>\r\n``` javascript\r\nspromise.when($.ajax(\"json/array.json\"), $.ajax(\"json/object.json\")).done(function( $array, $object ) {\r\n  // Will print the XHR objects $array and $object\r\n  console.log($array, $object);\r\n});\r\n```\r\n\r\nCompliance\r\n========\r\n\r\nWith the exception of 2.2.5, which states that onFullfilled/onRejected must not be called with \"this\", all tests for compliance pass.<br>\r\nThe reason spromise was left non compliant for this particular item is to faithfully handle \"context\" configured in jQuery ajax requests.\r\n\r\n<pre>\r\n  868 passing (14s)\r\n  4 failing\r\n\r\n  1) 2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). strict mode fulfilled:\r\n     Error: timeout of 200ms exceeded\r\n      at null.<anonymous> (/Users/mcastillo/Projects/promises-tests/node_modules/mocha/lib/runnable.js:165:14)\r\n      at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)\r\n\r\n  2) 2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). strict mode rejected:\r\n     Error: timeout of 200ms exceeded\r\n      at null.<anonymous> (/Users/mcastillo/Projects/promises-tests/node_modules/mocha/lib/runnable.js:165:14)\r\n      at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)\r\n\r\n  3) 2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). sloppy mode fulfilled:\r\n     Error: timeout of 200ms exceeded\r\n      at null.<anonymous> (/Users/mcastillo/Projects/promises-tests/node_modules/mocha/lib/runnable.js:165:14)\r\n      at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)\r\n\r\n  4) 2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). sloppy mode rejected:\r\n     Error: timeout of 200ms exceeded\r\n      at null.<anonymous> (/Users/mcastillo/Projects/promises-tests/node_modules/mocha/lib/runnable.js:165:14)\r\n      at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)\r\n</pre>\r\n",
  "readmeFilename": "README.md",
  "_id": "spromise@0.0.4",
  "_shasum": "92f8aca141c1ae7f4055e9b6b9e09c21b7493beb",
  "_resolved": "git://github.com/MiguelCastillo/spromise.git#3e352cb2e34c4848323852215072f31f62dfe2ea",
  "_from": "spromise@git://github.com/MiguelCastillo/spromise.git"
}
